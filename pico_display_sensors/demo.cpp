#include <string.h>
#include <math.h>
#include <vector>
#include <cstdlib>

#include "pico_display.hpp"

using namespace pimoroni;

extern unsigned char image_tif[];
extern unsigned int image_tif_len;

uint8_t FontData[96][5]={
        {0b0000000,0b0000000,0b0000000,0b0000000,0b0000000}, // space
        {0b0000000,0b0000000,0b1111101,0b0000000,0b0000000}, // !
        {0b0000000,0b1110000,0b0000000,0b1110000,0b0000000}, // "
        {0b0010100,0b1111111,0b0010100,0b1111111,0b0010100}, // #
        {0b0010010,0b0101010,0b1111111,0b0101010,0b0100100}, // $
        {0b1100010,0b1100100,0b0001000,0b0010011,0b0100011}, // %
        {0b0110110,0b1001001,0b1010101,0b0100010,0b0000101}, // &
        {0b0000000,0b0000000,0b1100000,0b0000000,0b0000000}, // â€™
        {0b0000000,0b0011100,0b0100010,0b1000001,0b0000000}, // (
        {0b0000000,0b1000001,0b0100010,0b0011100,0b0000000}, // )
        {0b0010100,0b0001000,0b0111110,0b0001000,0b0010100}, // *
        {0b0001000,0b0001000,0b0111110,0b0001000,0b0001000}, // +
        {0b0000000,0b0000101,0b0000110,0b0000000,0b0000000}, // ,
        {0b0001000,0b0001000,0b0001000,0b0001000,0b0001000}, // -
        {0b0000000,0b0000011,0b0000011,0b0000000,0b0000000}, // .
        {0b0000010,0b0000100,0b0001000,0b0010000,0b0100000}, // /
        {0b0111110,0b1000101,0b1001001,0b1010001,0b0111110}, // 0
        {0b0000000,0b0100001,0b1111111,0b0000001,0b0000000}, // 1
        {0b0100011,0b1000101,0b1001001,0b1001001,0b0110001}, // 2
        {0b0100010,0b1000001,0b1001001,0b1001001,0b0110110}, // 3
        {0b0001100,0b0010100,0b0100100,0b1111111,0b0000100}, // 4
        {0b1110010,0b1010001,0b1010001,0b1010001,0b1001110}, // 5
        {0b0011110,0b0101001,0b1001001,0b1001001,0b0000110}, // 6
        {0b1000000,0b1000111,0b1001000,0b1010000,0b1100000}, // 7
        {0b0110110,0b1001001,0b1001001,0b1001001,0b0110110}, // 8
        {0b0110000,0b1001001,0b1001001,0b1001010,0b0111100}, // 9
        {0b0000000,0b0110110,0b0110110,0b0000000,0b0000000}, // :
        {0b0000000,0b0110101,0b0110110,0b0000000,0b0000000}, // ;
        {0b0001000,0b0010100,0b0100010,0b1000001,0b0000000}, // <
        {0b0010100,0b0010100,0b0010100,0b0010100,0b0010100}, // =
        {0b0000000,0b1000001,0b0100010,0b0010100,0b0001000}, // >
        {0b0100000,0b1000000,0b1000101,0b1001000,0b0110000}, // ?
        {0b0100110,0b1001001,0b1001111,0b1000001,0b0111110}, // @
        {0b0011111,0b0100100,0b1000100,0b0100100,0b0011111}, // A
        {0b1000001,0b1111111,0b1001001,0b1001001,0b0110110}, // B
        {0b0111110,0b1000001,0b1000001,0b1000001,0b0100010}, // C
        {0b1000001,0b1111111,0b1000001,0b1000001,0b0111110}, // D
        {0b1111111,0b1001001,0b1001001,0b1001001,0b1000001}, // E
        {0b1111111,0b1001000,0b1001000,0b1001000,0b1000000}, // F
        {0b0111110,0b1000001,0b1000001,0b1001001,0b0101111}, // G
        {0b1111111,0b0001000,0b0001000,0b0001000,0b1111111}, // H
        {0b0000000,0b1000001,0b1111111,0b1000001,0b0000000}, // I
        {0b0000010,0b0000001,0b1000001,0b1111110,0b1000000}, // J
        {0b1111111,0b0001000,0b0010100,0b0100010,0b1000001}, // K
        {0b1111111,0b0000001,0b0000001,0b0000001,0b0000001}, // L
        {0b1111111,0b0100000,0b0011000,0b0100000,0b1111111}, // M
        {0b1111111,0b0010000,0b0001000,0b0000100,0b1111111}, // N
        {0b0111110,0b1000001,0b1000001,0b1000001,0b0111110}, // O
        {0b1111111,0b1001000,0b1001000,0b1001000,0b0110000}, // P
        {0b0111110,0b1000001,0b1000101,0b1000010,0b0111101}, // Q
        {0b1111111,0b1001000,0b1001100,0b1001010,0b0110001}, // R
        {0b0110010,0b1001001,0b1001001,0b1001001,0b0100110}, // S
        {0b1000000,0b1000000,0b1111111,0b1000000,0b1000000}, // T
        {0b1111110,0b0000001,0b0000001,0b0000001,0b1111110}, // U
        {0b1111100,0b0000010,0b0000001,0b0000010,0b1111100}, // V
        {0b1111110,0b0000001,0b0001110,0b0000001,0b1111110}, // W
        {0b1100011,0b0010100,0b0001000,0b0010100,0b1100011}, // X
        {0b1110000,0b0001000,0b0000111,0b0001000,0b1110000}, // Y
        {0b1000011,0b1000101,0b1001001,0b1010001,0b1100001}, // Z
        {0b0000000,0b1111111,0b1000001,0b1000001,0b0000000}, // [
        {0b0100000,0b0010000,0b0001000,0b0000100,0b0000010}, // backslash
        {0b0000000,0b1000001,0b1000001,0b1111111,0b0000000}, // ]
        {0b0010000,0b0100000,0b1000000,0b0100000,0b0010000}, // ^
        {0b0000001,0b0000001,0b0000001,0b0000001,0b0000001}, // _
        {0b0000000,0b1000000,0b0100000,0b0010000,0b0000000}, // `
        {0b0000010,0b0010101,0b0010101,0b0010101,0b0001111}, // a
        {0b1111111,0b0001001,0b0010001,0b0010001,0b0001110}, // b
        {0b0001110,0b0010001,0b0010001,0b0010001,0b0000010}, // c
        {0b0001110,0b0010001,0b0010001,0b0001001,0b1111111}, // d
        {0b0001110,0b0010101,0b0010101,0b0010101,0b0001100}, // e
        {0b0001000,0b0111111,0b1001000,0b1000000,0b0100000}, // f
        {0b0001000,0b0010101,0b0010101,0b0010101,0b0011110}, // g
        {0b1111111,0b0001000,0b0010000,0b0010000,0b0001111}, // h
        {0b0000000,0b0001001,0b1011111,0b0000001,0b0000000}, // i
        {0b0000010,0b0000001,0b0010001,0b1011110,0b0000000}, // j
        {0b1111111,0b0000100,0b0001010,0b0010001,0b0000000}, // k
        {0b0000000,0b1000001,0b1111111,0b0000001,0b0000000}, // l
        {0b0011111,0b0010000,0b0001111,0b0010000,0b0001111}, // m
        {0b0011111,0b0001000,0b0010000,0b0010000,0b0001111}, // n
        {0b0001110,0b0010001,0b0010001,0b0010001,0b0001110}, // o
        {0b0011111,0b0010100,0b0010100,0b0010100,0b0001000}, // p
        {0b0001000,0b0010100,0b0010100,0b0001100,0b0011111}, // q
        {0b0011111,0b0001000,0b0010000,0b0010000,0b0001000}, // r
        {0b0001001,0b0010101,0b0010101,0b0010101,0b0000010}, // s
        {0b0010000,0b1111110,0b0010001,0b0000001,0b0000010}, // t
        {0b0011110,0b0000001,0b0000001,0b0000010,0b0011111}, // u
        {0b0011100,0b0000010,0b0000001,0b0000010,0b0011100}, // v
        {0b0011110,0b0000001,0b0000110,0b0000001,0b0011110}, // w
        {0b0010001,0b0001010,0b0000100,0b0001010,0b0010001}, // x
        {0b0011000,0b0000101,0b0000101,0b0000101,0b0011110}, // y
        {0b0010001,0b0010011,0b0010101,0b0011001,0b0010001}, // z
        {0b0000000,0b0001000,0b0110110,0b1000001,0b0000000}, // {
        {0b0000000,0b0000000,0b1111111,0b0000000,0b0000000}, // |
        {0b0000000,0b1000001,0b0110110,0b0001000,0b0000000}, // }
        {0b0000100,0b0001000,0b0001000,0b0000100,0b0001000}, // ~
        {0b0000110,0b0001001,0b1010001,0b0000001,0b0000010} // Que?
};

uint16_t buffer[PicoDisplay::WIDTH * PicoDisplay::HEIGHT];
PicoDisplay pico_display(buffer);

void charAt(uint8_t c, int x, int y){
    if(c < 0x20 || c > 0x9e) c = 0x9f;
    c = c - 0x20; // font starts at
    for(int cx=0; cx<5; cx++) {
        uint8_t col;
        col = FontData[c][cx];
        for(int cy=0; cy<7; cy++){
            if(col & 0x40) {
                pico_display.set_pen(255,255,0);
                pico_display.pixel(Point(x+cx, y+cy));
            }
            col <<=1;
        }
    }
}

void stringAt(const std::string &p, int x, int y) {
    for(int i = 0; char c=p[i]; i++) {
        charAt(c,x,y);
        x += 6;
        if(x>= 240) {
            x = 0;
            y+= 8;
            if( y>135) return;
        }
    }
}





int main() {
    pico_display.init();
    pico_display.set_backlight(100);
    pico_display.set_led(0,0,0);
    const uint8_t LED_PIN = 25;
    gpio_init(LED_PIN);
    gpio_set_dir(LED_PIN, GPIO_OUT);
    int textX = 0, textX2 = 0;
    int textY = 0, textY2 = 0;
    int textdx = 1;
    int textdy = 1;
    uint32_t  i = 0;

    while(true) {

        std::string s("abcdefghijklmnopqrstuvwxyz");
        std::string s2("[The quick brown fox jumps over the lazy dog!]");
        stringAt(s,textX,textY);
        stringAt(s2,textX,textY+8);
        std::string s3("Hello there!!");
        int textW = s3.length()*6;
        int textH = 8;
        stringAt(s3,textX2,textY2);
        textX2 += textdx;
        textY2 += textdy;
        if(textX2 < 0) textdx *= -1;
        if(textX2+textW >= pico_display.bounds.w) textdx *= -1;
        if(textY2 < 0) textdy *= -1;
        if(textY2+textH >= pico_display.bounds.h) textdy *= -1;
// update screen

        pico_display.update();

        i++;
        if(i>1000){
            break;
        }
    }
    return 0;




}

